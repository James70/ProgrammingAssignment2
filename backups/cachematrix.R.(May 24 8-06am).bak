# Student name: Jim Perkins

# Important things to know before testing these functions
# -------------------------------------------------------
# Not all matrices can be inverted! For example, if you have a matrix with
# colinear row vectors or column vectors such as the example below:
#
#                1 4 7
#           A =  2 5 8
#                3 6 9
#
# ...then computing the inverse with solve(A) will result with the following error:
#
#                     "system is exactly singular: U[3,3] = 0"
#
# Therefore, in testing this assignment it may be easier to create your own test
# matrix by editing "sample matrix1.dat" and "sample matrix2.data" and then read the
# file into the environment using the following:
#
#         mydata <- read.table("sample matrix 1.dat")
#
# To make it easy for you, I have a sample test script dialog you can use at the console 
# to type in commands which test both functions (and show you how they are supposed to be used).
#
# PLEASE VIEW THE FILE NAMED "SAMPLE TEST SCRIPT.TXT" to see how I tested my functions       
# ##########################################################################################


# makeCacheMatrix(x)   
# Description: Defines an R object which has a list of 4 anonymous functions. The functions
#              perform operations on two cache data structures (matrices) which can only be
#              accessed by instantiating the object and calling its methods (i.e. functions) 
#              (This is quite similar to the principle used in modern day object oriented languages)
#
#              store(y) : stores an input matrix in cache
#              read()   : reads the matrix stored in cache     
#              setInv() : computes the inverse of the matrix and saves it in cache
#              readInv(): reads the inverse matrix
#
#              Arguments:
#              Note - no arguments area required to instantiate this object.
#              example   obj <- makeCacheMatrix() 
#                             
#                     will create an object "obj" which you can then use to manipulate
#                     the cache matrix data elements, example:  obj$store(matrix)
#         


makeCacheMatrix <- function(x = matrix()) {
     I <- as.matrix(0)
     set <- function(y) {x <<- y; I <- 0} #set() clears previous inverse value
     read <- function() x
     setInv <- function() I <<- solve(x)
     readInv <- function() I
     
     list(  set = set,
           read = read,
          setInv  = setInv,
          readInv = readInv) 
 }


# cacheSolve(y, x )   
# Description: Returns a matrix that is the inverse of 'y'
#              x is an object of class "makeCacheMatrix"
#
#              Computes the inverse of y (a matrix). The 2nd argument is an object  
#              of type "makeCacheMatrix". It is provided so cacheSolve can also access
#              the cached data matrix elements to determine whether the inverse matrix 
#              has already been computed.
#
#              If not, cacheSolve() will recompute the matrix. 
#
#              Arguments:
#              y  : the matrix you would like to compute the inverse of
#              x  : an object of type "makeCacheMatrix"


cacheSolve <- function(y, x) {
     
     cm<- x$readInv()    # retrieve the cached inverse matrix 
     data <- x$read()    # retrieve the cached normal matrix
      
     # if argument y (the matrix) is identical to the matix in cache, just return the
     # cached inverse matrix and do not recalculate the inverse 
     if (identical(y,data) && length(cm)!= 0){
          message("Inverse has already been computed. Retrieving cached data...")
          return(cm)
     }
     
     # otherwise, recalculate the inverse
     x$set(y)           # save the new matix in cache
     cm <- x$setInv()   # re-compute and store the inverse of the new matrix 
     cm
}
